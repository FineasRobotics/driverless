<?xml version="1.0"?>
<launch>

  <arg name="model" default="$(find car_description_vel)/urdf/car.xacro"/>
  <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />
  <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -x 0.012267 -y 18.386687 -z 0.1 -Y -1.5 -model car" respawn="false" output="screen" />

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find car_description_vel)/config/car_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/car" args=" 
  joint_state_controller 
  BackWheel_left_velocity_controller 
  BackWheel_right_velocity_controller
  Turner_right_position_controller 
  Turner_left_position_controller 
  Front_left_wheel_controller 
  Front_right_wheel_controller" />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/car/joint_states" />
  </node>

  <!--load the car parameters-->
  <include file="$(find car_description_vel)/launch/car_parameters.launch" />

  <!-- load the script controller-->
  <node pkg="car_description_vel" name="move" type="move.py"></node>
<!--  <node pkg="car_description" name="tf_robot_odom_bridge" type="tf_robot_odom_bridge.py"></node>-->
<!--  <node pkg="car_description" name="odometry" type="odometry.py"></node>-->
</launch>

